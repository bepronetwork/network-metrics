@use "sass:math";
@import "variables";

@mixin propValue($prop, $value) {
  #{$prop}: $value!important;
}

@mixin opacityLoop($prop, $color, $append: false) {
  @each $value in $opacities {
    &-#{$value} {
      @if $append {
        #{$append} { @include propValue($prop, adjust-color($color, $alpha: -(math.div($value, 100)))) }
      }
      @else {
        @include propValue($prop, adjust-color($color, $alpha: -(math.div($value, 100))))
      }
    }
  }
}

@mixin colorCss($colorName, $color, $propName, $svg: false) {
  &-#{"" + $colorName} {
    @include propValue($propName, $color);
    &-hover:hover { @include propValue($propName, $color); }
    &-op { @include opacityLoop($propName, $color) }

    @if $svg {
      path { @include propValue(fill, $color); }
      &-hover:hover path { @include propValue(fill, $color); }
      &-op { @include opacityLoop(fill, $color, path) }
    }
  }
}

// text-color
.color {
  @each $colorName, $color in $colors {
    @include colorCss($colorName, $color, color, true)
  }
}

// background-color
.bg {
  @each $colorName, $color in $colors {
    @include colorCss($colorName, $color, background-color)
  }
  &-transparent {
    background-color: transparent;
  }
}

// element opacity
.opacity {
  @each $value in $opacities {
    &-#{$value} {
      opacity: percentage($value);
    }
  }
}

// button background color hover and disable interaction
.button,button {
  &[class*=bg]:not([class*=hover]) {
    @each $colorName, $color in $colors {
      &.bg-#{"" + $colorName}:hover {background-color: darken($color, $hover-darken)!important;}
      //&.color-#{"" + $colorName}:hover {color: darken($color, $hover-darken)!important;}
    }
    &:disabled,&.inactive {
      cursor: not-allowed;
      @each $colorName, $color in $colors {
        &.bg-#{"" + $colorName} {background-color: adjust-color($color, $alpha: $disable-alpha)!important;}
        &.color-#{"" + $colorName} {color: adjust-color($color, $alpha: $disable-alpha)!important;}
      }
    }
  }
}

// default anchor color
a:not([class*=color]) {
  color: map-get($colors, primary);
  &:active,&:visited,&:hover {
    color: map-get($colors, primary);
  }
}
